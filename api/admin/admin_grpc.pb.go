// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.0--rc3
// source: proto/admin.proto

package admin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdminServiceClient is the client API for AdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminServiceClient interface {
	CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*City, error)
	CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*District, error)
	CreatePropertyType(ctx context.Context, in *CreatePropertyTypeRequest, opts ...grpc.CallOption) (*PropertyType, error)
	CreateUnit(ctx context.Context, in *CreateUnitRequest, opts ...grpc.CallOption) (*Unit, error)
	CreatePackaging(ctx context.Context, in *CreatePackagingRequest, opts ...grpc.CallOption) (*Packaging, error)
	CreateConfectionaryType(ctx context.Context, in *CreateConfectionaryTypeRequest, opts ...grpc.CallOption) (*ConfectionaryType, error)
	FindByIdCity(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*City, error)
	FindByIdDistrict(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*District, error)
	FindByIdPropertyType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*PropertyType, error)
	FindByIdUnit(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Unit, error)
	FindByIdPackaging(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Packaging, error)
	FindByIdConfectionaryType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*ConfectionaryType, error)
	ListByNameCity(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListCityResponse, error)
	ListByNameDistrict(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListDistrictResponse, error)
	ListByNamePropertyType(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListPropertyTypeResponse, error)
	ListByNameUnit(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListUnitResponse, error)
	ListByNamePackaging(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListPackagingResponse, error)
	ListByNameConfectionaryType(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListConfectionaryTypeResponse, error)
	ListCity(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCityResponse, error)
	ListDistrict(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDistrictResponse, error)
	ListPropertyType(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPropertyTypeResponse, error)
	ListUnit(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUnitResponse, error)
	ListPackaging(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPackagingResponse, error)
	ListConfectionaryType(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListConfectionaryTypeResponse, error)
	UpdateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error)
	UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*District, error)
	UpdatePropertyType(ctx context.Context, in *PropertyType, opts ...grpc.CallOption) (*PropertyType, error)
	UpdateUnit(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*Unit, error)
	UpdatePackaging(ctx context.Context, in *Packaging, opts ...grpc.CallOption) (*Packaging, error)
	UpdateConfectionaryType(ctx context.Context, in *ConfectionaryType, opts ...grpc.CallOption) (*ConfectionaryType, error)
	DeleteCity(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteDistrict(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	DeletePropertyType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteUnit(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	DeletePackaging(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteConfectionaryType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error)
}

type adminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminServiceClient(cc grpc.ClientConnInterface) AdminServiceClient {
	return &adminServiceClient{cc}
}

func (c *adminServiceClient) CreateCity(ctx context.Context, in *CreateCityRequest, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/admin.AdminService/CreateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateDistrict(ctx context.Context, in *CreateDistrictRequest, opts ...grpc.CallOption) (*District, error) {
	out := new(District)
	err := c.cc.Invoke(ctx, "/admin.AdminService/CreateDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreatePropertyType(ctx context.Context, in *CreatePropertyTypeRequest, opts ...grpc.CallOption) (*PropertyType, error) {
	out := new(PropertyType)
	err := c.cc.Invoke(ctx, "/admin.AdminService/CreatePropertyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateUnit(ctx context.Context, in *CreateUnitRequest, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, "/admin.AdminService/CreateUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreatePackaging(ctx context.Context, in *CreatePackagingRequest, opts ...grpc.CallOption) (*Packaging, error) {
	out := new(Packaging)
	err := c.cc.Invoke(ctx, "/admin.AdminService/CreatePackaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) CreateConfectionaryType(ctx context.Context, in *CreateConfectionaryTypeRequest, opts ...grpc.CallOption) (*ConfectionaryType, error) {
	out := new(ConfectionaryType)
	err := c.cc.Invoke(ctx, "/admin.AdminService/CreateConfectionaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindByIdCity(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/admin.AdminService/FindByIdCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindByIdDistrict(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*District, error) {
	out := new(District)
	err := c.cc.Invoke(ctx, "/admin.AdminService/FindByIdDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindByIdPropertyType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*PropertyType, error) {
	out := new(PropertyType)
	err := c.cc.Invoke(ctx, "/admin.AdminService/FindByIdPropertyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindByIdUnit(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, "/admin.AdminService/FindByIdUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindByIdPackaging(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Packaging, error) {
	out := new(Packaging)
	err := c.cc.Invoke(ctx, "/admin.AdminService/FindByIdPackaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) FindByIdConfectionaryType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*ConfectionaryType, error) {
	out := new(ConfectionaryType)
	err := c.cc.Invoke(ctx, "/admin.AdminService/FindByIdConfectionaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListByNameCity(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListCityResponse, error) {
	out := new(ListCityResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListByNameCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListByNameDistrict(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListDistrictResponse, error) {
	out := new(ListDistrictResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListByNameDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListByNamePropertyType(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListPropertyTypeResponse, error) {
	out := new(ListPropertyTypeResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListByNamePropertyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListByNameUnit(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListUnitResponse, error) {
	out := new(ListUnitResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListByNameUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListByNamePackaging(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListPackagingResponse, error) {
	out := new(ListPackagingResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListByNamePackaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListByNameConfectionaryType(ctx context.Context, in *ListByNameRequest, opts ...grpc.CallOption) (*ListConfectionaryTypeResponse, error) {
	out := new(ListConfectionaryTypeResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListByNameConfectionaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListCity(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListCityResponse, error) {
	out := new(ListCityResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListDistrict(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListDistrictResponse, error) {
	out := new(ListDistrictResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListPropertyType(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPropertyTypeResponse, error) {
	out := new(ListPropertyTypeResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListPropertyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListUnit(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListUnitResponse, error) {
	out := new(ListUnitResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListPackaging(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListPackagingResponse, error) {
	out := new(ListPackagingResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListPackaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) ListConfectionaryType(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListConfectionaryTypeResponse, error) {
	out := new(ListConfectionaryTypeResponse)
	err := c.cc.Invoke(ctx, "/admin.AdminService/ListConfectionaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateCity(ctx context.Context, in *City, opts ...grpc.CallOption) (*City, error) {
	out := new(City)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UpdateCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateDistrict(ctx context.Context, in *UpdateDistrictRequest, opts ...grpc.CallOption) (*District, error) {
	out := new(District)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UpdateDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePropertyType(ctx context.Context, in *PropertyType, opts ...grpc.CallOption) (*PropertyType, error) {
	out := new(PropertyType)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UpdatePropertyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateUnit(ctx context.Context, in *Unit, opts ...grpc.CallOption) (*Unit, error) {
	out := new(Unit)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UpdateUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdatePackaging(ctx context.Context, in *Packaging, opts ...grpc.CallOption) (*Packaging, error) {
	out := new(Packaging)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UpdatePackaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) UpdateConfectionaryType(ctx context.Context, in *ConfectionaryType, opts ...grpc.CallOption) (*ConfectionaryType, error) {
	out := new(ConfectionaryType)
	err := c.cc.Invoke(ctx, "/admin.AdminService/UpdateConfectionaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteCity(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminService/DeleteCity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteDistrict(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminService/DeleteDistrict", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeletePropertyType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminService/DeletePropertyType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteUnit(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminService/DeleteUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeletePackaging(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminService/DeletePackaging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *adminServiceClient) DeleteConfectionaryType(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/admin.AdminService/DeleteConfectionaryType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminServiceServer is the server API for AdminService service.
// All implementations must embed UnimplementedAdminServiceServer
// for forward compatibility
type AdminServiceServer interface {
	CreateCity(context.Context, *CreateCityRequest) (*City, error)
	CreateDistrict(context.Context, *CreateDistrictRequest) (*District, error)
	CreatePropertyType(context.Context, *CreatePropertyTypeRequest) (*PropertyType, error)
	CreateUnit(context.Context, *CreateUnitRequest) (*Unit, error)
	CreatePackaging(context.Context, *CreatePackagingRequest) (*Packaging, error)
	CreateConfectionaryType(context.Context, *CreateConfectionaryTypeRequest) (*ConfectionaryType, error)
	FindByIdCity(context.Context, *FindByIdRequest) (*City, error)
	FindByIdDistrict(context.Context, *FindByIdRequest) (*District, error)
	FindByIdPropertyType(context.Context, *FindByIdRequest) (*PropertyType, error)
	FindByIdUnit(context.Context, *FindByIdRequest) (*Unit, error)
	FindByIdPackaging(context.Context, *FindByIdRequest) (*Packaging, error)
	FindByIdConfectionaryType(context.Context, *FindByIdRequest) (*ConfectionaryType, error)
	ListByNameCity(context.Context, *ListByNameRequest) (*ListCityResponse, error)
	ListByNameDistrict(context.Context, *ListByNameRequest) (*ListDistrictResponse, error)
	ListByNamePropertyType(context.Context, *ListByNameRequest) (*ListPropertyTypeResponse, error)
	ListByNameUnit(context.Context, *ListByNameRequest) (*ListUnitResponse, error)
	ListByNamePackaging(context.Context, *ListByNameRequest) (*ListPackagingResponse, error)
	ListByNameConfectionaryType(context.Context, *ListByNameRequest) (*ListConfectionaryTypeResponse, error)
	ListCity(context.Context, *ListRequest) (*ListCityResponse, error)
	ListDistrict(context.Context, *ListRequest) (*ListDistrictResponse, error)
	ListPropertyType(context.Context, *ListRequest) (*ListPropertyTypeResponse, error)
	ListUnit(context.Context, *ListRequest) (*ListUnitResponse, error)
	ListPackaging(context.Context, *ListRequest) (*ListPackagingResponse, error)
	ListConfectionaryType(context.Context, *ListRequest) (*ListConfectionaryTypeResponse, error)
	UpdateCity(context.Context, *City) (*City, error)
	UpdateDistrict(context.Context, *UpdateDistrictRequest) (*District, error)
	UpdatePropertyType(context.Context, *PropertyType) (*PropertyType, error)
	UpdateUnit(context.Context, *Unit) (*Unit, error)
	UpdatePackaging(context.Context, *Packaging) (*Packaging, error)
	UpdateConfectionaryType(context.Context, *ConfectionaryType) (*ConfectionaryType, error)
	DeleteCity(context.Context, *FindByIdRequest) (*Empty, error)
	DeleteDistrict(context.Context, *FindByIdRequest) (*Empty, error)
	DeletePropertyType(context.Context, *FindByIdRequest) (*Empty, error)
	DeleteUnit(context.Context, *FindByIdRequest) (*Empty, error)
	DeletePackaging(context.Context, *FindByIdRequest) (*Empty, error)
	DeleteConfectionaryType(context.Context, *FindByIdRequest) (*Empty, error)
	mustEmbedUnimplementedAdminServiceServer()
}

// UnimplementedAdminServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAdminServiceServer struct {
}

func (UnimplementedAdminServiceServer) CreateCity(context.Context, *CreateCityRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCity not implemented")
}
func (UnimplementedAdminServiceServer) CreateDistrict(context.Context, *CreateDistrictRequest) (*District, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDistrict not implemented")
}
func (UnimplementedAdminServiceServer) CreatePropertyType(context.Context, *CreatePropertyTypeRequest) (*PropertyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePropertyType not implemented")
}
func (UnimplementedAdminServiceServer) CreateUnit(context.Context, *CreateUnitRequest) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUnit not implemented")
}
func (UnimplementedAdminServiceServer) CreatePackaging(context.Context, *CreatePackagingRequest) (*Packaging, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackaging not implemented")
}
func (UnimplementedAdminServiceServer) CreateConfectionaryType(context.Context, *CreateConfectionaryTypeRequest) (*ConfectionaryType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConfectionaryType not implemented")
}
func (UnimplementedAdminServiceServer) FindByIdCity(context.Context, *FindByIdRequest) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdCity not implemented")
}
func (UnimplementedAdminServiceServer) FindByIdDistrict(context.Context, *FindByIdRequest) (*District, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdDistrict not implemented")
}
func (UnimplementedAdminServiceServer) FindByIdPropertyType(context.Context, *FindByIdRequest) (*PropertyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdPropertyType not implemented")
}
func (UnimplementedAdminServiceServer) FindByIdUnit(context.Context, *FindByIdRequest) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdUnit not implemented")
}
func (UnimplementedAdminServiceServer) FindByIdPackaging(context.Context, *FindByIdRequest) (*Packaging, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdPackaging not implemented")
}
func (UnimplementedAdminServiceServer) FindByIdConfectionaryType(context.Context, *FindByIdRequest) (*ConfectionaryType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByIdConfectionaryType not implemented")
}
func (UnimplementedAdminServiceServer) ListByNameCity(context.Context, *ListByNameRequest) (*ListCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNameCity not implemented")
}
func (UnimplementedAdminServiceServer) ListByNameDistrict(context.Context, *ListByNameRequest) (*ListDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNameDistrict not implemented")
}
func (UnimplementedAdminServiceServer) ListByNamePropertyType(context.Context, *ListByNameRequest) (*ListPropertyTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNamePropertyType not implemented")
}
func (UnimplementedAdminServiceServer) ListByNameUnit(context.Context, *ListByNameRequest) (*ListUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNameUnit not implemented")
}
func (UnimplementedAdminServiceServer) ListByNamePackaging(context.Context, *ListByNameRequest) (*ListPackagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNamePackaging not implemented")
}
func (UnimplementedAdminServiceServer) ListByNameConfectionaryType(context.Context, *ListByNameRequest) (*ListConfectionaryTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListByNameConfectionaryType not implemented")
}
func (UnimplementedAdminServiceServer) ListCity(context.Context, *ListRequest) (*ListCityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCity not implemented")
}
func (UnimplementedAdminServiceServer) ListDistrict(context.Context, *ListRequest) (*ListDistrictResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDistrict not implemented")
}
func (UnimplementedAdminServiceServer) ListPropertyType(context.Context, *ListRequest) (*ListPropertyTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPropertyType not implemented")
}
func (UnimplementedAdminServiceServer) ListUnit(context.Context, *ListRequest) (*ListUnitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUnit not implemented")
}
func (UnimplementedAdminServiceServer) ListPackaging(context.Context, *ListRequest) (*ListPackagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackaging not implemented")
}
func (UnimplementedAdminServiceServer) ListConfectionaryType(context.Context, *ListRequest) (*ListConfectionaryTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConfectionaryType not implemented")
}
func (UnimplementedAdminServiceServer) UpdateCity(context.Context, *City) (*City, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCity not implemented")
}
func (UnimplementedAdminServiceServer) UpdateDistrict(context.Context, *UpdateDistrictRequest) (*District, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDistrict not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePropertyType(context.Context, *PropertyType) (*PropertyType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePropertyType not implemented")
}
func (UnimplementedAdminServiceServer) UpdateUnit(context.Context, *Unit) (*Unit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUnit not implemented")
}
func (UnimplementedAdminServiceServer) UpdatePackaging(context.Context, *Packaging) (*Packaging, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackaging not implemented")
}
func (UnimplementedAdminServiceServer) UpdateConfectionaryType(context.Context, *ConfectionaryType) (*ConfectionaryType, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConfectionaryType not implemented")
}
func (UnimplementedAdminServiceServer) DeleteCity(context.Context, *FindByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCity not implemented")
}
func (UnimplementedAdminServiceServer) DeleteDistrict(context.Context, *FindByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDistrict not implemented")
}
func (UnimplementedAdminServiceServer) DeletePropertyType(context.Context, *FindByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePropertyType not implemented")
}
func (UnimplementedAdminServiceServer) DeleteUnit(context.Context, *FindByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUnit not implemented")
}
func (UnimplementedAdminServiceServer) DeletePackaging(context.Context, *FindByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackaging not implemented")
}
func (UnimplementedAdminServiceServer) DeleteConfectionaryType(context.Context, *FindByIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConfectionaryType not implemented")
}
func (UnimplementedAdminServiceServer) mustEmbedUnimplementedAdminServiceServer() {}

// UnsafeAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminServiceServer will
// result in compilation errors.
type UnsafeAdminServiceServer interface {
	mustEmbedUnimplementedAdminServiceServer()
}

func RegisterAdminServiceServer(s grpc.ServiceRegistrar, srv AdminServiceServer) {
	s.RegisterService(&AdminService_ServiceDesc, srv)
}

func _AdminService_CreateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/CreateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateCity(ctx, req.(*CreateCityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/CreateDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateDistrict(ctx, req.(*CreateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreatePropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePropertyTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreatePropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/CreatePropertyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreatePropertyType(ctx, req.(*CreatePropertyTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUnitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/CreateUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateUnit(ctx, req.(*CreateUnitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreatePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreatePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/CreatePackaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreatePackaging(ctx, req.(*CreatePackagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_CreateConfectionaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConfectionaryTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).CreateConfectionaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/CreateConfectionaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).CreateConfectionaryType(ctx, req.(*CreateConfectionaryTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindByIdCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindByIdCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/FindByIdCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindByIdCity(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindByIdDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindByIdDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/FindByIdDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindByIdDistrict(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindByIdPropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindByIdPropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/FindByIdPropertyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindByIdPropertyType(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindByIdUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindByIdUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/FindByIdUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindByIdUnit(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindByIdPackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindByIdPackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/FindByIdPackaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindByIdPackaging(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_FindByIdConfectionaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).FindByIdConfectionaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/FindByIdConfectionaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).FindByIdConfectionaryType(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListByNameCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListByNameCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListByNameCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListByNameCity(ctx, req.(*ListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListByNameDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListByNameDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListByNameDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListByNameDistrict(ctx, req.(*ListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListByNamePropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListByNamePropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListByNamePropertyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListByNamePropertyType(ctx, req.(*ListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListByNameUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListByNameUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListByNameUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListByNameUnit(ctx, req.(*ListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListByNamePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListByNamePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListByNamePackaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListByNamePackaging(ctx, req.(*ListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListByNameConfectionaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListByNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListByNameConfectionaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListByNameConfectionaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListByNameConfectionaryType(ctx, req.(*ListByNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListCity(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListDistrict(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListPropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListPropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListPropertyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListPropertyType(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListUnit(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListPackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListPackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListPackaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListPackaging(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_ListConfectionaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).ListConfectionaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/ListConfectionaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).ListConfectionaryType(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(City)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UpdateCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateCity(ctx, req.(*City))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDistrictRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UpdateDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateDistrict(ctx, req.(*UpdateDistrictRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropertyType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UpdatePropertyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePropertyType(ctx, req.(*PropertyType))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Unit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UpdateUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateUnit(ctx, req.(*Unit))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdatePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Packaging)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdatePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UpdatePackaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdatePackaging(ctx, req.(*Packaging))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_UpdateConfectionaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfectionaryType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).UpdateConfectionaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/UpdateConfectionaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).UpdateConfectionaryType(ctx, req.(*ConfectionaryType))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteCity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteCity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/DeleteCity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteCity(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteDistrict_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteDistrict(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/DeleteDistrict",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteDistrict(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeletePropertyType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeletePropertyType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/DeletePropertyType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeletePropertyType(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/DeleteUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteUnit(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeletePackaging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeletePackaging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/DeletePackaging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeletePackaging(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AdminService_DeleteConfectionaryType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminServiceServer).DeleteConfectionaryType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.AdminService/DeleteConfectionaryType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminServiceServer).DeleteConfectionaryType(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminService_ServiceDesc is the grpc.ServiceDesc for AdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "admin.AdminService",
	HandlerType: (*AdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCity",
			Handler:    _AdminService_CreateCity_Handler,
		},
		{
			MethodName: "CreateDistrict",
			Handler:    _AdminService_CreateDistrict_Handler,
		},
		{
			MethodName: "CreatePropertyType",
			Handler:    _AdminService_CreatePropertyType_Handler,
		},
		{
			MethodName: "CreateUnit",
			Handler:    _AdminService_CreateUnit_Handler,
		},
		{
			MethodName: "CreatePackaging",
			Handler:    _AdminService_CreatePackaging_Handler,
		},
		{
			MethodName: "CreateConfectionaryType",
			Handler:    _AdminService_CreateConfectionaryType_Handler,
		},
		{
			MethodName: "FindByIdCity",
			Handler:    _AdminService_FindByIdCity_Handler,
		},
		{
			MethodName: "FindByIdDistrict",
			Handler:    _AdminService_FindByIdDistrict_Handler,
		},
		{
			MethodName: "FindByIdPropertyType",
			Handler:    _AdminService_FindByIdPropertyType_Handler,
		},
		{
			MethodName: "FindByIdUnit",
			Handler:    _AdminService_FindByIdUnit_Handler,
		},
		{
			MethodName: "FindByIdPackaging",
			Handler:    _AdminService_FindByIdPackaging_Handler,
		},
		{
			MethodName: "FindByIdConfectionaryType",
			Handler:    _AdminService_FindByIdConfectionaryType_Handler,
		},
		{
			MethodName: "ListByNameCity",
			Handler:    _AdminService_ListByNameCity_Handler,
		},
		{
			MethodName: "ListByNameDistrict",
			Handler:    _AdminService_ListByNameDistrict_Handler,
		},
		{
			MethodName: "ListByNamePropertyType",
			Handler:    _AdminService_ListByNamePropertyType_Handler,
		},
		{
			MethodName: "ListByNameUnit",
			Handler:    _AdminService_ListByNameUnit_Handler,
		},
		{
			MethodName: "ListByNamePackaging",
			Handler:    _AdminService_ListByNamePackaging_Handler,
		},
		{
			MethodName: "ListByNameConfectionaryType",
			Handler:    _AdminService_ListByNameConfectionaryType_Handler,
		},
		{
			MethodName: "ListCity",
			Handler:    _AdminService_ListCity_Handler,
		},
		{
			MethodName: "ListDistrict",
			Handler:    _AdminService_ListDistrict_Handler,
		},
		{
			MethodName: "ListPropertyType",
			Handler:    _AdminService_ListPropertyType_Handler,
		},
		{
			MethodName: "ListUnit",
			Handler:    _AdminService_ListUnit_Handler,
		},
		{
			MethodName: "ListPackaging",
			Handler:    _AdminService_ListPackaging_Handler,
		},
		{
			MethodName: "ListConfectionaryType",
			Handler:    _AdminService_ListConfectionaryType_Handler,
		},
		{
			MethodName: "UpdateCity",
			Handler:    _AdminService_UpdateCity_Handler,
		},
		{
			MethodName: "UpdateDistrict",
			Handler:    _AdminService_UpdateDistrict_Handler,
		},
		{
			MethodName: "UpdatePropertyType",
			Handler:    _AdminService_UpdatePropertyType_Handler,
		},
		{
			MethodName: "UpdateUnit",
			Handler:    _AdminService_UpdateUnit_Handler,
		},
		{
			MethodName: "UpdatePackaging",
			Handler:    _AdminService_UpdatePackaging_Handler,
		},
		{
			MethodName: "UpdateConfectionaryType",
			Handler:    _AdminService_UpdateConfectionaryType_Handler,
		},
		{
			MethodName: "DeleteCity",
			Handler:    _AdminService_DeleteCity_Handler,
		},
		{
			MethodName: "DeleteDistrict",
			Handler:    _AdminService_DeleteDistrict_Handler,
		},
		{
			MethodName: "DeletePropertyType",
			Handler:    _AdminService_DeletePropertyType_Handler,
		},
		{
			MethodName: "DeleteUnit",
			Handler:    _AdminService_DeleteUnit_Handler,
		},
		{
			MethodName: "DeletePackaging",
			Handler:    _AdminService_DeletePackaging_Handler,
		},
		{
			MethodName: "DeleteConfectionaryType",
			Handler:    _AdminService_DeleteConfectionaryType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/admin.proto",
}
